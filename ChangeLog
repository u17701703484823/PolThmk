v1.2.5
-------------------------------------------------------------------------------- 
 * fixes a deadlock that caused connections to get stuck in output, locking
   up the connection and a server thread forever. Thanks to @FrankStolle for
   reporting and getting the necessary data.
 
v1.2.4
-------------------------------------------------------------------------------- 
 * removed all H2*Timeout directives. HTTP/2 uses not the same Timeout and
   KeepAliveTimeout as HTTP/1.1.
 * enforcing the Timeout value on read and write operations from the selected
   virtual host (TLS+SNI). httpd was wrongly using the defaults set in the
   base server config.
 * add DEBUG logging to see if writing properly returns to catch a connection
   hanger reported in #79
 
v1.2.3
-------------------------------------------------------------------------------- 
 * connection timeout handling when requests do not report back
 * setting correct server config for event mpm on main connection, so that
   timeouts, keepalives use the correct values
 * fixes event hack to match changes in structures

v1.2.2
-------------------------------------------------------------------------------- 
 * removed unused code
 
v1.2.1
-------------------------------------------------------------------------------- 
 * fixed compilation error because of stupid own log2n function
 * fixed cache digest calculation to spit out same values as Kazuho Oku's
   reference implementation (https://github.com/kazuho/h2-cache-digest).
 
v1.2.0
-------------------------------------------------------------------------------- 
 * Each connection now has a push diary where already pushed resources are
   recorded (as 64-bit subsets sha256 URL hashes). The maximum size of a diary
   can be configured with the new directive 'H2PushDiarySize'. The default is 256.
 * The module recognizes the request header 'Cache-Digest', carrying a base64url
   encoded set of hash values using Golomb set encoding as described in
      https://datatracker.ietf.org/doc/draft-kazuho-h2-cache-digest/
   This is highly experimental and will most likely change in format and
   interpretation as the draft evolves. For now, this value is used to replace
   the current push diary. This allows clients to inform the server about
   which resources they already have cached.
 * module configuration now looks to the crypto library (because it wants SHA256
   from it). If it is not found, a replacement hash is used, however this is
   not interoperable with cache digests from clients, e.g. hits will be missed.
 * the module has a new handler named "http2-status" which exposes certain
   properties and statistics of the *current* HTTP/2 connection. It can be 
   configured just like:
       <Location "/http2-status">
         SetHandler http2-status
       </Location>
   The usual precautions about exposing some internals of your server to the
   outside world apply. Just as for "server-status"."
 * Due to more test cases and new functions, more bugs have been exposed,
   examined and exterminated.

v1.1.0
-------------------------------------------------------------------------------- 
 * GOAWAY will be sent when a HTTP/2 connection is shutdown, whenever the
   connection still allows it. Calculation of the last stream id has been
   corrected to include streams started, not only streams finished processing.
 * several issues fixed with new fuzzing tests that simulate random closes 
   and delays/timeouts
 * H2SessionExtraFiles are now shared between all sessions in the same process.
   It now works like this:
   H2MaxWorkers * H2SessionFiles is assumed to be the total number of file
   handles that can be safely used for HTTP/2 transfers without other parts
   of the server running out of handles. This number is shared between all
   HTTP/2 connections in the same server process.
   The default is set to 2. With H2MaxWorkers on most platforms/mpms
   defaulting to 25 that gives a maximum of 50 handles that can be invoved in
   transfers. 
   I think I have to write a blog post one day of how this works and affects
   performance. tl;dr the more handles http2 may use, the faster static files
   can be served.
 * KeepAlive is not correctly visible on the server status page for HTTP/2
   connections. (Would like more info there, need to extend the scoreboard
   for it.)
 * KeepAlive connections are *not* set aside in async MPMs such as event. This
   is a very desirable feature, but I could not get it to work reliably with
   the existing MPM interface. Will work on that for the next Apache release.
   (The main problem is that event will silently close such connections and
    http2 has no chance to send a last GOAWAY frame. That makes clients fail
    requests which they have just started.)

v1.0.18
-------------------------------------------------------------------------------- 
 * fixed race condition in connnection shutdown that could cause indefinite 
   hang, fixed cleanup of http2 worker threads, thanks to Yann Ylavic
 
v1.0.17
-------------------------------------------------------------------------------- 
 * H2Timeout/H2KeepAliveTimeout now defaults to what ever is set for HTTP/1
   connections via Timeout/KeepAliveTimeout
 * fixes in calculating remaining timeout values

v1.0.16
-------------------------------------------------------------------------------- 
 * simplified connection shutdown and worker join for robustness
 * improved performance for small requests due to less locking
 * http2 connections work in event with normal server KeepAliveTimeout setting
 
v1.0.15
-------------------------------------------------------------------------------- 
 * fixed busy loops on random connection errors
 * fixed connection state for event MPM that shutdown child with 'G' status
 * changed default for H2KeepAliveTimeout. For async MPMs (event), will leave
   keepalive handling to the MPM. For sync (worker, prefork), will default to
   whatever is set for H2Timeout.
 
v1.0.14
-------------------------------------------------------------------------------- 
 * fixed segfault on connection shutdown
 * added support for accept-push-policy headers, see
   https://tools.ietf.org/html/draft-ruellan-http-accept-push-policy-00
 
v1.0.13
-------------------------------------------------------------------------------- 
 * reworked connection state handling. Improved scoreboard update (server-status).
   Default on H2KeepAliveTimeout same as H2Timeout, 5 seconds. After that, 
   connections are closed.
   On asynchronous MPMs (event), keep-alive connections no longer block threads,
   but exact timeout handling is then up to the MPM. In these MPMs, having a
   longer H2KeepAliveTimeout may be suitable.
 * new CGI environment variables HTTP2 and H2PUSH. With former "on", the 
   connection uses HTTP/2. With latter "on", the request may trigger Server Push
   via Link headers, as both server and clients support it.

v1.0.12
-------------------------------------------------------------------------------- 
 * alpha release on top of Apache httpd 2.4.18
 * removed sandbox from build, needs installed 2.4.18 + apxs
 * new directives:
   - H2Timeout           timeout of a http/2 connection (seconds), default 5
   - H2KeepAliveTimeout  timeout of an idle http/2 connection (seconds), default 300
   - H2StreamTimeout     timeout on individual streams (seconds), default 120
   you can set them to `0` in which case no timeout may apply. You may try that
   for the stream timeouts if you have problems. This is the very experimental
   part right now...
 * improved handling of connection closes to make a better effort on freeing
   worker threads still involved in streams.
 * worker numbers are constant MaxThreadsPerChild by default
 * fixed bug on handling large input without content length
   
v1.0.3
-------------------------------------------------------------------------------- 
 * copy from https://svn.apache.org/repos/asf/httpd/httpd/trunk
 * includes proposed backport patch for Apache httpd 2.4.17
   * improved https:// throughput
   * vastly improved http:// throughput
   * several stability and logging improvements
   * connection reuse: virtual hosts that have exactly the same TLS setup
     (certificates, protocol, ciphers and all) allow using a single HTTP/2
     connection.
   * h2c: first HTTP/1.1 request on a connection will announce additionally
     available and more preferred protocols in the ```Upgrade``` response
     header.
   * H2Direct is by default on for cleartext connections where h2c is an
     allowed protocol. Or, the other way around, it is always disabled unless
     h2/h2c is configured.
   * TLS handshake is triggered earlier, allowing all connection hooks which
     register behind mod_ssl to see negotiated values.
   * new experimental directives ```H2TLSWarmUpSize``` and ```H2TLSCoolDownSecs```
     that specify how TLS record sizes should used during the lifetime of a
     connection.
     * H2TLSWarmUpSize: amount of bytes to send in small (~1300 bytes) chunks,
       so that packets fit inside a single MTU. After this many bytes have
       been sent, data is written with max size of 16 KB when possible.
     * H2TLSCoolDownSecs: number of idle seconds to pass before a warmed
       up TLS connection falls back to small chunks again.
     Set both to 0 to always write max chunks. Defaults are 1 MB and 1 second.
   * HTTP/2 priorities are now respected when scheduling streams for handling.
     This effects which queued task is handled first whenever a worker becomes
     available.
   * New directive ```H2ModernTLSOnly on|off``` that checks connections for
     TLS protocol version and negotiated ciphers, so that HTTP/2 connections
     only happen on ```modern``` TLS and none of the ciphers in the black
     list from RFC 7540 are used.
   * 'HTTP/2.0' is written in log files when requests are served via mod_http2.
     
 * updated test cases from Apache tests
 * configure now builds the sandbox by default, too many user problems
   otherwise


v0.9.9 - 1.0.2
-------------------------------------------------------------------------------- 
never happened here, but at http://httpd.apache.org

v0.9.8
-------------------------------------------------------------------------------- 
 * server protocol of requests served via mod_h2 is now `HTTP/2`
 * directive `H2SerializeHeaders` had no effect any longer, fixed.
 * requests served in `H2SerializeHeaders on` hosts, report `HTTP/1.1` as
   protocol. This is the mode to enabled when having compatiblity issues.

v0.9.7
-------------------------------------------------------------------------------- 
 * update of core-protocols.patch to v4
 * "Protocols" default changed. servers/vhosts need to explicitly enable h2/h2c 
   now. For example with `Protocols h2 http/1.1`
 * adding test cases for "Protocols" ordering
 * configuration option -enable-werror now sets compiler flags to go for Apache
   httpd standard code restrictions.

v0.9.6
-------------------------------------------------------------------------------- 
 * for closed h2 connections proper state is set. Fixes resource/worker handling
   issues in mpm_event
 * upgrade the core-protocols patch to the latest relevant apache changes
 * if not explicitly configured, H2SessionExtraFiles gets a default usable in
   proecsses with 256 max file handles and depending on mpm used.
 * upgraded sandbox to nghttp2 1.3.0

v0.9.5
-------------------------------------------------------------------------------- 
 * fix for resource management when running with mpm_event

v0.9.4
-------------------------------------------------------------------------------- 
 * mod_h2 is a copy of the module in Apache httpd trunk
 * requires a patched httpd for new Protocols feature. Patch applied in sandbox,
   available for own use in sandbox/httpd/patches/core_protocols_release.patch.
 * See README.me about changes, especially the chapter about Migration
 * Several H2* directives have disappeared, also see Migration in README.md
 * This version should be close to the release candidate. Report any issues
   here at github or on the apache httpd dev mailing list

v0.8.3
-------------------------------------------------------------------------------- 
 * Fixed typo in module setup during installation that broke enabling the module
   via a2enmod.

v0.8.2
-------------------------------------------------------------------------------- 
 * In case "H2SerializeHeaders On" is configured, errorneous requests led to
   500 responses. Fixed by installing post_read hooks really early now.

v0.8.1
-------------------------------------------------------------------------------- 
 * added some defensive code for configurations at user that produced duplicate
   response headers
 * added httpd/trunk fix to allocate task memory pools under mplx locking

v0.8.0
-------------------------------------------------------------------------------- 
 * when serving static files, these are kept open longer (and buffer copied
   less). Use config "H2SessionExtraFiles" to change the value. The more you
   can give per connection, the better. But you may run out of open file 
   handles, if not careful. Default value is 5, which seems to work on my
   config with mpms worker, event and prefork. Basically, eaach httpd process
   needs at least #connections + #workers + (#conn * #extrafiles) available.
 * main connection buffering, buffer sizes and write sizes are configurable,
   see README.md for the list of options. buffer sizes and write sizes influence
   the TLS performance. Defaults seem reasonably, but ymmv.
 * general performance improved due to better handling of stream close and
   resource cleanup
 * prefork mpm confirmed working. Unless configured otherwise, each session
   will only have 1 worker thread. Raise this with "H2MaxWorkers"
 * changed sandbox cipher config to mozilla recommendation (thanks Lucas)
 * sandbox update to nghttp2 1.0.5

v0.7.3
--------------------------------------------------------------------------------
 * sandbox update to nghttp2 1.0.4
 * rework of stream scheduling and thread sync
 * test suite runs with mpm_prefork on OS X and Ubuntu (feedback welcome)

v0.7.2
--------------------------------------------------------------------------------
 * fixes crash with certain modules that (correctly) expected their 
   pre_connection hooks to work. Solves #28
 * fixes log statements and Makefile to compile sandbox on 32bit linux

v0.7.1
--------------------------------------------------------------------------------
 * h2_mplx now uses reference counting to enable a controlled destruction on
   session termination. If this fixes all the crashes reported, remains to
   be seen.

v0.7.0
--------------------------------------------------------------------------------
 * switching to nghttp2 v1.0.*, compilation + linkage with nghttp2 v0.7.* will
   not work any more as there have been changes in nghttp2's API. The sandbox
   builds against v1.0.2 and also pulls curl 7.43.0 which did the same version
   switch.
 * keeping support for h2-16/h2-14 ALPN identifiers until a 1.0 release
 * varying h2 support (on|off) among virtual hosts on the same port is now
   possible and should work correctly.
 * improved mod_ssl alpn patch to correctly select the proper virtual host
   even if the SSL library invokes SNI after ALPN callbacks.
 * Disabled NPN support in sandbox built. The patch for httpd 2.4.x is still
   there, but no longer applied.
 * KNOWN ISSUE: when using mpm_event, the error 
     "error scoreboard is full, not at MaxRequestWorkers" 
   sometimes happens. Under investigation. mpm_worker ist stable and recommended
   for now.


v0.6.6
--------------------------------------------------------------------------------
 * adding sni_misdirect.patch for httpd/mod_ssl that changes status code when 
   TLS connections are reused for other vhosts. 

v0.6.5
--------------------------------------------------------------------------------
 * httpd scoreboard fixups: scoreboard handles are still updated on the main
   connection from all stream request incoming from it, since it is not trivial
   to get new handles for h2 workers. Updating of scoreboard status has been 
   improved, no workers remain on "G"raceful shutdown in load tests any longer.
 * some refacoring to isolate tls/alpn/upgrade code
 * adding php-wrapper script to distribution, was missing

v0.6.4
--------------------------------------------------------------------------------
 * accepting "h2" on Upgrade: headers and allowing also Upgrade to work on TLS
   connections that talk HTTP/1.1.
 * logging WARNING once when mod_h2 is used in a "prefork" mpm configuration.
   There seem to be issues with mod_proxy/rewrite and dankging I/O.
 * added test suites for combinations with mod_proxy and mod_rewrite
 * added test for request with Host: header where h2 is not enabled
 * sandbox now builds local openssl 1.0.2 if 1.0.1 or older are installed
   on the system. Prior 1.0.1 was accepted, but NPN support will be disabled
   soon.
 * added "Known Problems" section in README
 * direct mode should also work with TLS connections, untested currently.

v0.6.3
--------------------------------------------------------------------------------
 * h2c direct mode is now enabled on http: virtual hosts. It can be disabled
   by configuring "H2Direct off" for the base server. This works for clients
   with prior knowledge that a http server supports h2c.

v0.6.2
--------------------------------------------------------------------------------
 * added "H2Direct (on|off)" as config directive. On a non-TLS host, it enables
   direct h2c communication without any Upgrade dance. Useful for testing, for
   example with h2load.
 * fixed concurrency issue observed on a mpm_event server when closing sessions

v0.6.1
--------------------------------------------------------------------------------
 * relaxing task finished sync due to segfaults with mpm_event
 * mod_reqtimeout enabled on stream processing again
 * merged pr from ecovener, fix for ap_update_vhost_from_headers use
 * tinkering with buffering on main connection

v0.6.0
--------------------------------------------------------------------------------
 * fiddling around with task/worker assignments to use the global h2_workers
   lock less, giving better parallelism
 * ./configure --enable-werror enables all sorts of compiler diagnostics, if
   the chosen compiler supports them
 * merged pull request with compiler warning fixes by LPardue and @samhurst 
   (Thanks!)
 * new config option "H2SerializeHeaders (On|Off)" that determines if request
   response headers should be serialized/parsed when converting from HTTP/2 to
   httpd's internal HTTP/1 processing or request_recs are manipulated directly.
   "Off" is default, "On" gives better compatibility.
 * new config options "H2HackMpmEvent (On|Off) that enables a hack to make
   internal connection work with the mpm_event module. Has no effect if other
   mpm modules have been configured. Defaults to "On"."
 * upgrading sandbox to nghttp2 0.7.15

v0.5.6
--------------------------------------------------------------------------------
 * making SSL variables available in subprocess (e.g. CGI) environments if
configured (fixes #19)

v0.5.5
--------------------------------------------------------------------------------
 * improved transfer of large resources by 50% by more efficient writes

v0.5.4
 --------------------------------------------------------------------------------
 * moving request handling and http/1 emulation into worker thread, offloading 
   main
 * some fixes in connection shutdown re race condition with still active workers
 * removing reqtimeout filters on stream connections
 * taking in latest alpn changes from httpd trunk, made separate npn patch for
   those who need to run with openssl 1.0.1
 * fixed handling of transient bucket in stream output data (led to corrupted
   responses)
 * reworked task join to eliminate race conditions during session shutdown
 * info logging is less verbose

v0.5.2
--------------------------------------------------------------------------------
 * rewrote the input handling
    * forwarding headers in camel case to HTTP/1 request prossing
    * merging duplicate headers into single line with proper separators
    * eliminated h2_bucket by using apr_bucket_brigades everywhere
    * added test cases and fixed chunked input processing
 * sandbox now uses curl 7.42.0
 * enhanced alpn patch slightly, compatible to old one, no need to repatch mod_ssl on existing installations
 * adding some tests with fcgi, for sandbox testing please install php5-cgi

v0.5.1
--------------------------------------------------------------------------------
 * ensuring HOST header is properly set for internal request handling
 * updated sandbox to latest nghttp2 release

v0.5.0
--------------------------------------------------------------------------------
 * improved resource handling and performance
 * fixes lookup of correct server config when several virtual hosts are 
   available

v0.4.5
--------------------------------------------------------------------------------
 * fixed base64 decoding to use correct dialect when upgrading to h2c

v0.4.4
--------------------------------------------------------------------------------
 * adds missing file in distribution tar, fixes #11
 * sandbox now uses nghttp2 0.7.11

v0.4.3
--------------------------------------------------------------------------------
 * heavy work on internal data transfers, use of apache bucket brigades for
   improved performance and parallelism
 * mod_h2 now performs proper flow-control on input. Uploads can no longer
   flood memory of the server.
 * changed mod_ssl patch to reflect current trunk changes in regard to NPN/ALPN
   support.
 * patched the trunk ALPN patch to make it do the right thing if no 
   ALPNPreference is configured
 * added DESTDIR support in Makefile as supplied by Hanno Böck.

v0.4.2
--------------------------------------------------------------------------------
 * adding more low-level logging to NPN/ALPN negotiation
 * added '-Werror' to module compiler flags (thanks @devurandom)
 * debugged and tcpdumped around h2c startup handling with curl on certain
   platforms. If you experience connection hangers, report pls with 'trace2'
   level error log.

v0.4.1
--------------------------------------------------------------------------------
 * fixing infinite loop when aborting session with tasks hanging in read

v0.4.0
--------------------------------------------------------------------------------
 * h2 + h2-16 will be negiotiated/upgraded. Priority handling is implemented
   in nghttp2, however assigning requests to workers has currently not the
   necessary information.
 * Alt-Svc support based on https://http2.github.io/http2-spec/alt-svc.html#indicator
   Configuration directives "H2AltSvc" and "H2AltSvcMaxAge" added. Configurable
   per virtual host.
 * reduced lock contention and eliminated broadcast signalling on internal 
   condition variables, improved multi-thread performance

v0.3.1
--------------------------------------------------------------------------------
 * defining _GNU_SOURCE to pull in proper features and make APR header files
   happy, fixes #7 

v0.3.0
--------------------------------------------------------------------------------
 * new directory structure, all sandbox related parts have been moved to 
   own sandbox dir
 * non-sandbox configuration no longer triggers building of sandbox stuff
 * cleanup up distribution builds to have smaller and working tar balls

v0.2.2
--------------------------------------------------------------------------------
 * optimizations on response reads
 * being more apacheeeish, using APR_RINGs for queue handling
 * using openssl latest.tar.gz to retrieve latest openssl for sandbox
 * fixed crash in large request header handling
 * better flushing of stream io resulting in performance improvements
 * added sandbox tests for chunked responses of various sizes
 * integrated fix (https://github.com/icing/mod_h2/pull/5) from 
   Jonathan (invader444) to fix chunked encoding when converting http/1
   responses to http2 unchunked data.

v0.2.1
--------------------------------------------------------------------------------
 * changed apr_pool usage to have more recycling, 50% performance increase in 
   loadtest
 * added hack to enable mod_h2 to run in mpm_event (experimental)
 * changed internal stream/data lookup from O(n/2) to O(log(n)) time
 * fixed index in http2 to http1 header conversion leading to segfaults
 * update openssl version downloaded for sandbox
 * using sha256 for self-signed sandbox certificates
 * sandbox certificate no longer announces itself as roo
   (last 3 thanks to michael.koeller at greenbytes.de)

v0.2.0
--------------------------------------------------------------------------------
 * merged pull request from Tatsuhiro Tsujikawa, removing code for CONTINUATION
   frames that are never seen by mod_h2
 * request/response headers are filtered when converting between HTTP/1.1 and
   HTTP/2 where they can only do harm (Expect/Connection/etc.)
 * added test cases for uploads
 * fixed handling of uploads ;-)
 * enabled h2c upgrade for "OPTIONS *" requests
 * changed h2_stream_set implementation to use sorted apr array
 * switched to nghttp2 v0.7.7 in sandbox

v0.1.1
--------------------------------------------------------------------------------
 * added cgi test cases (needs python installed)
 * fixed typo in configure.ac that did not set the CPP flags correctly (#3)
 * fixed handling of chunked encoding in responses
 * merged header macro pull request from MATSUMOTO, Ryosuke

v0.1.0
--------------------------------------------------------------------------------
 * first alpha release, see README on how to use it and what is all missing
 * h2 supported with openssl > 1.0.1 and patched mod_ssl (patch included and used in sandbox)
 * h2c supported
 * only usable in mpm_worker right now
 * configure --enable-sandbox for a local install of everything needed
 * tested with httpd 2.4.12 and nghttp2 0.7.5 on Ubuntu 14.04 and OS X 10.10
