
mod_h2 - a http/2 modules for apache httpd
==========================================
The mod_h2 Apache httpd module implements the HTTP2 protocol (h2+h2c) on
top of libnghttp2 for httpd 2.4 servers. For a general description, see
the README, installation issues are detailed in INSTALL.

This document is for discussion of the module's internals, current issues
and exploration of ideas.


THE GOALS
---------
The goals of this module can be stated as follows:
- make the full htpp2 standard available in Apache httpd
- provide it as a module on top of httpd 2.4.x
- support deployment on standard unix platforms


HOW IT WORKS
------------
The architecture of this module is heavily inspired by Google's mod_spdy:
The incoming, parallel requests (http2 streams) are dispatched to a thread
pool, responses are collected and multiplexed on the original connection.

The major players in ascii art:

  h2_conn -> h2_session ------> h2_mplx ----> h2_task / h2_worker
  (socket)   (nghttp2_session)            |-> h2_task / h2_worker
                                          |-> h2_task / h2_worker
                                                ...

h2_session: by using nghttp2 API, is doing the http2 frame work, stream
            states, flow control, etc. Sits as connection level filter
            on standard httpd connections. Gets active either by ALPN
            selection or as HTTP/1.1 Upgrade from a request.

h2_mplx:    is a somewhat specialized bucket_brigate. It multiplexes data
            buckets associated with stream IDs in both directions and
            has some specials to reset streams or announce response headers.
            It also performs flow control on the downlink of streams.

h2_task:    having own conn_rec instance, plus in/out filters at connection
            level, is converting http2 streams into http/1.1 requests and
            parses back responses to http2 usable headers and data.


LIFETIMES
---------
For each connection that uses HTTP/2, a new h2_session is created. That lives
as long as all objects it creates: h2_stream and h2_task instances. So, when
closing a h2_session, this waits until all associated h2_streams have
been destroyed. h2_streams will only be destroyed when their h2_task is either
removed from the schedule queue or has terminated.

Insofar, the lifetimes from h2_session/h2_stream have the similar relations as
conn_rec/request_rec with the exception that there can be many simultaneous
h2_streams active per h2_session (and in various worker threads).


THREAD HANDLING
---------------
h2_session is only ever accessed from the thread handling the original
connection. Same for h2_stream instances. The execution of what is necessary
for execution of a h2_stream happens in h2_task. h2_task gets instantiated
in the connection thread, but is the handed to a worker and, apart from
checking its status atomically, not called by any other thread.

The object that shovels the data packages back and forth and is accessed from
multiple threads is h2_mplx. h2_tasks use it to retrieve their input and feed
it their output. h2_mplx blocks h2_tasks when no input is available or
the amount of output queue has reached a certain maximum.


MEMORY HANDLING
---------------
The session pool is a sub pool of the main connection pool, with the twist
that it has its own allocator (apr_allocator_t). That allocator is protected
with a apr_thread_mutex (one instance per session). All further sub-pools share
this allocator.

Protecting the allocator allows sub pools to live in other threads 
concurrently. Very important.

Everything related to a h2_stream (and even the struct itself) is allocated
from a new subpool. This guarantuees that all memory is recycled when the 
stream is destroyed. Same holds true for h2_tasks, which get their own 
sub pools.



THREAD HANDLING
---------------
There is a nice thread pool in apr-util which even suports priority scheduling.
It would be good to exchange the h2_worker(s) for this pool, except mod_h2
has the use case that streams can be aborted by the client and the
corresponding task needs to be removed from the schedule without any
blocking wait for a possibly running task to complete. This is not offered
by apr-util.


DISCUSSION / OPEN QUESTIONS
---------------------------
While HTTP2 clients will be happy to have low lags in using the protocol,
httpd owners will notice performance degradations. Early measurements
indicate that for small requests, like the famous gopher tile page
(https://http2.golang.org/gophertiles), requests/s in loadtests show only
50% - 70% of the original HTTP/1.1 + TLS values. These tests were done
with h2load, a nghttp2 client working with multiple threads.

The main causes for this performance penalty seem to be:
- the mod_h2 architecture serializes HTTP2 headers into a HTTP/1.1 request
  and parses back a HTTP/1.1 response into headers and data for the HTTP2
  engine.
  We know currently of no way to directly have httpd processing a request_rec.
  Maybe that can be done with some internal know-how use as temporary
  work around...
- Data copying:
  APR and httpd have wonderful bucket brigades, but mod_h2 is not using them
  to the fullest capabilities. There are questions regarding multi-thread use
  of pools, subpools and brigades that make expert advice needed.
  So, what copying is done?
  INPUT:
    brigade(socket) --> nghttp2 read --> h2_bucket --> brigade(h2_task)
  OUTPUT
    brigade(h2_task) --> h2_bucket --> nghttp2 buffer --> brigade(socket)
  Due to async handling and the capabilities of nghttp2, we have to make
  copies at certain points in the process. Maybe we could avoid one copy
  in the OUTPUT queue, if we get a grip on multi-threaded bucket brigade
  handling...
- MPM MODULES:
  mpm_event currently requires a hack (see h2_conn.c) to make it work. The
  problem is its own event_conn_state struct that needs to be setup 
  properly or httpd will crash on task connections.


