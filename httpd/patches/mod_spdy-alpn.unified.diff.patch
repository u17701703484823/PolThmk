diff --git a/src/mod_spdy/mod_spdy.cc b/src/mod_spdy/mod_spdy.cc
index edbda52..58ab377 100644
--- a/src/mod_spdy/mod_spdy.cc
+++ b/src/mod_spdy/mod_spdy.cc
@@ -58,22 +58,23 @@ extern "C" {
 APR_DECLARE_OPTIONAL_FN(module*, ap_find_loaded_module_symbol,
                         (server_rec*, const char*));
 
-typedef int (*ssl_npn_advertise_protos)(conn_rec *connection, 
-                                        apr_array_header_t *protos);
+typedef int (*ssl_alpn_propose_protos)(conn_rec *connection, 
+                                        apr_array_header_t *client_protos,
+                                        apr_array_header_t *proposed_protos);
 
-typedef int (*ssl_npn_proto_negotiated)(conn_rec *connection, 
+typedef int (*ssl_alpn_proto_negotiated)(conn_rec *connection, 
                                         const char *proto_name,
                                         apr_size_t proto_name_len);
 
-APR_DECLARE_OPTIONAL_FN(int, modssl_register_npn, (conn_rec *conn, 
-                                                   ssl_npn_advertise_protos advertisefn,
-                                                   ssl_npn_proto_negotiated negotiatedfn));
+APR_DECLARE_OPTIONAL_FN(int, modssl_register_alpn, (conn_rec *conn, 
+                                                   ssl_alpn_propose_protos proposefn,
+                                                   ssl_alpn_proto_negotiated negotiatedfn));
 
 }  // extern "C"
 
 namespace {
 
-int AdvertiseSpdy(conn_rec* connection, apr_array_header_t* protos);
+int ProposeSpdy(conn_rec* connection, apr_array_header_t *client_protos, apr_array_header_t* protos);
 int OnNextProtocolNegotiated(conn_rec* connection, const char* proto_name,
                              apr_size_t proto_name_len);
 
@@ -322,19 +326,21 @@ int PreConnection(conn_rec* connection, void* csd) {
     // The callback will check if we're actually to be using SPDY with the client,
     // and enable this module if so.
 
-    int (*register_npn)(conn_rec *conn,
-                        ssl_npn_advertise_protos advertisefn,
-                        ssl_npn_proto_negotiated negotiatedfn) =
-        APR_RETRIEVE_OPTIONAL_FN(modssl_register_npn);
+    int (*register_alpn)(conn_rec *conn,
+                        ssl_alpn_propose_protos proposefn,
+                        ssl_alpn_proto_negotiated negotiatedfn) =
+        APR_RETRIEVE_OPTIONAL_FN(modssl_register_alpn);

-    if (register_npn != NULL) {
-      LOG(INFO) << "Registering NPN callbacks at mod_ssl";
+    if (register_alpn != NULL) {
+      LOG(INFO) << "Registering ALPN callbacks at mod_ssl";
 
-      if (register_npn(connection, AdvertiseSpdy, OnNextProtocolNegotiated) != OK) {
+      if (register_alpn(connection, ProposeSpdy, OnNextProtocolNegotiated) != OK) {
+        LOG(INFO) << "Registering ALPN callback declined";
         return DECLINED;
       }
     }
     else {
+      LOG(INFO) << "Registering ALPN callback not implemented";
       return DECLINED;
     }
 
@@ -502,7 +510,7 @@ int ProcessConnection(conn_rec* connection) {
 
 // Called by mod_ssl when it needs to decide what protocols to advertise to the
 // client during Next Protocol Negotiation (NPN).
-int AdvertiseSpdy(conn_rec* connection, apr_array_header_t* protos) {
+int ProposeSpdy(conn_rec* connection, apr_array_header_t* client_protos, apr_array_header_t* protos) {
   const mod_spdy::SpdyServerConfig* config =
       mod_spdy::GetServerConfig(connection);
   LOG(INFO) << "SPDY: advertise spdy on connection";
